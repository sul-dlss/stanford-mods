= Stanford::Mods

{<img src="https://secure.travis-ci.org/sul-dlss/stanford-mods.png?branch=master" alt="Build Status" />}[http://travis-ci.org/sul-dlss/stanford-mods] {<img src="https://coveralls.io/repos/sul-dlss/stanford-mods/badge.png" alt="Coverage Status" />}[https://coveralls.io/r/sul-dlss/stanford-mods] {<img src="https://gemnasium.com/sul-dlss/stanford-mods.png" alt="Dependency Status" />}[https://gemnasium.com/sul-dlss/stanford-mods] {<img src="https://badge.fury.io/rb/stanford-mods.svg" alt="Gem Version" />}[http://badge.fury.io/rb/stanford-mods]

A Gem with Stanford specific wranglings of MODS (Metadata Object Description Schema) metadata from DOR, the Stanford Digital Object Repository.

Source code at https://github.com/sul-dlss/stanford-mods/

Generated API docs at  http://rubydoc.info/github/sul-dlss/stanford-mods/

== Installation

Add this line to your application's Gemfile:

    gem 'stanford-mods'

And then execute:

    $ bundle

Or install it yourself as:

    $ gem install stanford-mods

== Usage

1. add stanford-mods to your gemfile
2. require 'stanford-mods'

  > m = Stanford::Mods::Record.new
  > m.from_str('<mods><genre>ape</genre></mods>')
  > m.genre
  => [#<Nokogiri::XML::Element:0x3fe07b48bb24 name="genre" children=[#<Nokogiri::XML::Text:0x3fe07a09a7dc "ape">]>]
  > m.genre.text
  => "ape"

  > m.to_be_removed        <-- method I wrote in stanford-mods for proof of concept
  in foo!
  => nil

Example Using SearchWorks Mixins:

  > require 'stanford-mods/searchworks'
  > m = Stanford::Mods::Record.new
  > m.from_str('<mods><language><languageTerm authority="iso639-2b" type="code">dut</languageTerm></language></mods>')
  > m.language_facet    <-- from Searchworks mixin
  => ['Dutch']
  > m.languages         <-- from mods gem
  => ['Dutch; Flemish']

== Contributing

1. Fork it
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Write code and tests.
4. Commit your changes (`git commit -am 'Added some feature'`)
5. Push to the branch (`git push origin my-new-feature`)
6. Create new Pull Request

== Releases
* <b>1.1.2</b> Corrected java Character.MAX_CODE_POINT value from \u{FFFF} to \u{10FFFF}
* <b>1.1.1</b> Minor bug fixes
* <b>1.1.0</b> Changed mechanism for determining dates for display only and for indexing, sorting, and faceting and removed deprecated pub_date_group method
* <b>1.0.3</b> format_main value 'Article' is now 'Book'
* <b>1.0.2</b> add format_main and sw_genre tests to searchworks.rb
* <b>1.0.1</b> sw_title_display keeps appropriate trailing punct more or less per spec in solrmarc-sw sw_index.properties
* <b>1.0.0</b> sw_full_title now includes partName and partNumber; sw_title_display created to be like sw_full_title but without trailing punctuation; sw format for typeOfResource sound recording; genre value is librettos, plural; sw format algorithm accommodates first letter upcase; genre value report does NOT map to a format, genre value 'project report' with ToR text is 'Book'
* <b>0.0.27</b> add genres 'Issue brief', 'Book chapter' and 'Working paper' to map to searchworks format 'Book'
* <b>0.0.26</b> map typeOfResource 'sound recording-musical' to searchworks format 'Music - Recording' with spaces
* <b>0.0.25</b> map typeOfResource 'text' and genre 'report' to searchworks format 'Book'
* <b>0.0.24</b> Largely cosmetic refactoring for easier maintenance.
* <b>0.0.23</b> Added logic for dealing with "u-notation" approximate dates, e.g., 198u
* <b>0.0.20</b> Added mapping for typeOfResource notated music
* <b>0.0.19</b> Additional mappings, including Hydrus formats (GRYPHONDOR-207)
* <b>0.0.11</b> escape regex special characters when using short title in a regex
* <b>0.0.10</b> get rid of ignore_me files
* <b>0.0.9</b> add sw_subject_names and sw_subject_titles methods to searchworks mixin
* <b>0.0.8</b> require stanford-mods/searchworks in stanford-mods (top level)
* <b>0.0.7</b> added sw_geographic_search to searchworks mixin
* <b>0.0.6</b> various title methods added to searchworks mixin
* <b>0.0.5</b> main_author_w_date, additional_authors_w_dates added to Stanford::Mods::Record; various author methods added to searchworks mixin
* <b>0.0.4</b> KolbRecord started
* <b>0.0.3</b> began SearchWorks mixins with sw_access_facet and sw_language_facet
* <b>0.0.2</b> add usage instructions to readme
* <b>0.0.1</b> Initial commit - grab name
